/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/viki/Desktop/CPG/src/cpg/srv/ModifyParameters.srv
 *
 */


#ifndef CPG_MESSAGE_MODIFYPARAMETERSREQUEST_H
#define CPG_MESSAGE_MODIFYPARAMETERSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cpg
{
template <class ContainerAllocator>
struct ModifyParametersRequest_
{
  typedef ModifyParametersRequest_<ContainerAllocator> Type;

  ModifyParametersRequest_()
    : major_ax(0.0)
    , minor_ax(0.0)
    , coup_strength(0.0)
    , limit_cycle(0.0)
    , forward_velocity(0.0)
    , curvature(0.0)
    , x_offset()
    , y_offset()
    , coupling_1()
    , coupling_2()
    , coupling_3()
    , coupling_4()
    , coupling_5()
    , coupling_6()  {
    }
  ModifyParametersRequest_(const ContainerAllocator& _alloc)
    : major_ax(0.0)
    , minor_ax(0.0)
    , coup_strength(0.0)
    , limit_cycle(0.0)
    , forward_velocity(0.0)
    , curvature(0.0)
    , x_offset(_alloc)
    , y_offset(_alloc)
    , coupling_1(_alloc)
    , coupling_2(_alloc)
    , coupling_3(_alloc)
    , coupling_4(_alloc)
    , coupling_5(_alloc)
    , coupling_6(_alloc)  {
    }



   typedef float _major_ax_type;
  _major_ax_type major_ax;

   typedef float _minor_ax_type;
  _minor_ax_type minor_ax;

   typedef float _coup_strength_type;
  _coup_strength_type coup_strength;

   typedef float _limit_cycle_type;
  _limit_cycle_type limit_cycle;

   typedef float _forward_velocity_type;
  _forward_velocity_type forward_velocity;

   typedef float _curvature_type;
  _curvature_type curvature;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _x_offset_type;
  _x_offset_type x_offset;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _y_offset_type;
  _y_offset_type y_offset;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _coupling_1_type;
  _coupling_1_type coupling_1;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _coupling_2_type;
  _coupling_2_type coupling_2;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _coupling_3_type;
  _coupling_3_type coupling_3;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _coupling_4_type;
  _coupling_4_type coupling_4;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _coupling_5_type;
  _coupling_5_type coupling_5;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _coupling_6_type;
  _coupling_6_type coupling_6;




  typedef boost::shared_ptr< ::cpg::ModifyParametersRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cpg::ModifyParametersRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ModifyParametersRequest_

typedef ::cpg::ModifyParametersRequest_<std::allocator<void> > ModifyParametersRequest;

typedef boost::shared_ptr< ::cpg::ModifyParametersRequest > ModifyParametersRequestPtr;
typedef boost::shared_ptr< ::cpg::ModifyParametersRequest const> ModifyParametersRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cpg::ModifyParametersRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cpg::ModifyParametersRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cpg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'cpg': ['/home/viki/Desktop/CPG/src/cpg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cpg::ModifyParametersRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cpg::ModifyParametersRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cpg::ModifyParametersRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cpg::ModifyParametersRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cpg::ModifyParametersRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cpg::ModifyParametersRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cpg::ModifyParametersRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b77231e4a9814c4335488a7d53be3d5c";
  }

  static const char* value(const ::cpg::ModifyParametersRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb77231e4a9814c43ULL;
  static const uint64_t static_value2 = 0x35488a7d53be3d5cULL;
};

template<class ContainerAllocator>
struct DataType< ::cpg::ModifyParametersRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cpg/ModifyParametersRequest";
  }

  static const char* value(const ::cpg::ModifyParametersRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cpg::ModifyParametersRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 major_ax\n\
float32 minor_ax\n\
float32 coup_strength\n\
float32 limit_cycle\n\
float32 forward_velocity\n\
float32 curvature\n\
float64[] x_offset\n\
float64[] y_offset\n\
int32[] coupling_1\n\
int32[] coupling_2\n\
int32[] coupling_3\n\
int32[] coupling_4\n\
int32[] coupling_5\n\
int32[] coupling_6\n\
";
  }

  static const char* value(const ::cpg::ModifyParametersRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cpg::ModifyParametersRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.major_ax);
      stream.next(m.minor_ax);
      stream.next(m.coup_strength);
      stream.next(m.limit_cycle);
      stream.next(m.forward_velocity);
      stream.next(m.curvature);
      stream.next(m.x_offset);
      stream.next(m.y_offset);
      stream.next(m.coupling_1);
      stream.next(m.coupling_2);
      stream.next(m.coupling_3);
      stream.next(m.coupling_4);
      stream.next(m.coupling_5);
      stream.next(m.coupling_6);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ModifyParametersRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cpg::ModifyParametersRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cpg::ModifyParametersRequest_<ContainerAllocator>& v)
  {
    s << indent << "major_ax: ";
    Printer<float>::stream(s, indent + "  ", v.major_ax);
    s << indent << "minor_ax: ";
    Printer<float>::stream(s, indent + "  ", v.minor_ax);
    s << indent << "coup_strength: ";
    Printer<float>::stream(s, indent + "  ", v.coup_strength);
    s << indent << "limit_cycle: ";
    Printer<float>::stream(s, indent + "  ", v.limit_cycle);
    s << indent << "forward_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.forward_velocity);
    s << indent << "curvature: ";
    Printer<float>::stream(s, indent + "  ", v.curvature);
    s << indent << "x_offset[]" << std::endl;
    for (size_t i = 0; i < v.x_offset.size(); ++i)
    {
      s << indent << "  x_offset[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x_offset[i]);
    }
    s << indent << "y_offset[]" << std::endl;
    for (size_t i = 0; i < v.y_offset.size(); ++i)
    {
      s << indent << "  y_offset[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y_offset[i]);
    }
    s << indent << "coupling_1[]" << std::endl;
    for (size_t i = 0; i < v.coupling_1.size(); ++i)
    {
      s << indent << "  coupling_1[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.coupling_1[i]);
    }
    s << indent << "coupling_2[]" << std::endl;
    for (size_t i = 0; i < v.coupling_2.size(); ++i)
    {
      s << indent << "  coupling_2[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.coupling_2[i]);
    }
    s << indent << "coupling_3[]" << std::endl;
    for (size_t i = 0; i < v.coupling_3.size(); ++i)
    {
      s << indent << "  coupling_3[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.coupling_3[i]);
    }
    s << indent << "coupling_4[]" << std::endl;
    for (size_t i = 0; i < v.coupling_4.size(); ++i)
    {
      s << indent << "  coupling_4[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.coupling_4[i]);
    }
    s << indent << "coupling_5[]" << std::endl;
    for (size_t i = 0; i < v.coupling_5.size(); ++i)
    {
      s << indent << "  coupling_5[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.coupling_5[i]);
    }
    s << indent << "coupling_6[]" << std::endl;
    for (size_t i = 0; i < v.coupling_6.size(); ++i)
    {
      s << indent << "  coupling_6[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.coupling_6[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CPG_MESSAGE_MODIFYPARAMETERSREQUEST_H
